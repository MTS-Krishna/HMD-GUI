import numpy as np
import cv2
import torch

def generate_image_from_features(feature_vector, image_size=(64, 64)):
    """
    Convert a feature vector into an image tensor for CNN input.

    Args:
        feature_vector (dict, list, or numpy array): Extracted feature values.
        image_size (tuple): Target image dimensions (default: 64x64).

    Returns:
        torch.Tensor: Image tensor for CNN input.
    """

    if isinstance(feature_vector, dict):
        feature_vector = list(feature_vector.values())

    feature_array = np.array(feature_vector, dtype=np.float32)

    if feature_array.size == 0:
        raise ValueError("Feature extraction failed: Empty feature vector!")

    if feature_array.ndim > 1:
        feature_array = feature_array.flatten()

    feature_array = np.interp(feature_array, (feature_array.min(), feature_array.max()), (0, 255))

    num_features = feature_array.shape[0]
    side_length = int(np.ceil(np.sqrt(num_features)))

    feature_array = np.pad(feature_array, (0, side_length**2 - num_features), mode='constant')
    feature_array = feature_array.reshape(side_length, side_length)

    feature_image = cv2.resize(feature_array, image_size, interpolation=cv2.INTER_AREA)

    image_tensor = torch.tensor(feature_image, dtype=torch.float32) / 255.0
    image_tensor = image_tensor.unsqueeze(0)  # (1, 64, 64) -> Add a channel dimension

    # ğŸš¨ Fix: Convert grayscale to 3-channel format
    image_tensor = image_tensor.repeat(3, 1, 1)  # (1,64,64) -> (3,64,64)

    return image_tensor
