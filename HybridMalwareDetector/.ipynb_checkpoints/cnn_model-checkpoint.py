import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as transforms

class CNNMalwareClassifier(nn.Module):
    def __init__(self, num_classes=2):
        super(CNNMalwareClassifier, self).__init__()
        
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)

        # Calculate dynamic feature size
        self.flattened_size = self._compute_fc1_input()

        self.fc1 = nn.Linear(self.flattened_size, 128)  # Auto-sized now!
        self.fc2 = nn.Linear(128, num_classes)

    def _compute_fc1_input(self):
        """Automatically computes the correct input size for fc1."""
        with torch.no_grad():
            dummy_input = torch.zeros(1, 3, 64, 64)  # Check if image is 64x64
            dummy_output = self.pool(F.relu(self.conv1(dummy_input)))
            dummy_output = self.pool(F.relu(self.conv2(dummy_output)))
            print(f"Flattened size: {dummy_output.view(-1).shape[0]}")  # PRINT THE SHAPE
            return dummy_output.view(-1).shape[0]  # Correct shape

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)  # Flatten dynamically
        print(f"Input to fc1: {x.shape}")  # Debugging print
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Load the trained model
def load_cnn_model(model_path="HybridMalwareDetector/ml_models/cnn_model.pth"):
    model = CNNMalwareClassifier()
    model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')), strict=False)
    model.eval()
    return model

# Preprocess images for CNN
def preprocess_image(image_array):
    transform = transforms.Compose([
        transforms.ToPILImage(),
        transforms.Resize((32, 32)),  # Keep input consistent
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])
    return transform(image_array).unsqueeze(0)  # Add batch dimension

# Predict malware type
def predict_with_cnn(model, image_array):
    image_tensor = preprocess_image(image_array)
    with torch.no_grad():
        output = model(image_tensor)
        predicted_class = torch.argmax(output, dim=1).item()
    return predicted_class  # 0 = Safe, 1 = Malware
