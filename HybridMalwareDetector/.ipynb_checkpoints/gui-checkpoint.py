import sys
import os
import joblib
import numpy as np
import pandas as pd
import torch
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton, QFileDialog, 
    QComboBox, QMessageBox
)
from feature_extraction.pe_parser import extract_pe_features
from feature_extraction.pdf_parser import parse_pdfid_output
from feature_extraction.script_parser import extract_script_features
from feature_extraction.office_parser import extract_office_features
from feature_extraction.image_generator import generate_image_from_features
from cnn_model import CNNMalwareClassifier  # Assuming CNN model class exists

# Load trained ML models
RF_MODEL = joblib.load("HybridMalwareDetector/ml_models/random_forest_model.pkl")  # Random Forest
SVM_MODEL = joblib.load("HybridMalwareDetector/ml_models/svm_model.pkl")  # SVM

# Load CNN Model
CNN_MODEL = CNNMalwareClassifier()
saved_state_dict = torch.load("HybridMalwareDetector/ml_models/cnn_model.pth")
current_state_dict = CNN_MODEL.state_dict()

# Filter out incompatible keys
filtered_state_dict = {k: v for k, v in saved_state_dict.items() if k in current_state_dict and v.shape == current_state_dict[k].shape}
current_state_dict.update(filtered_state_dict)
CNN_MODEL.load_state_dict(current_state_dict, strict=False)
CNN_MODEL.eval()

# Malware type mapping
MALWARE_TYPES = ["Trojan", "Ransomware", "Spyware", "Rootkit", "Worm", "Adware"]

class MalwareDetectorGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Hybrid Malware Detector")
        self.setGeometry(100, 100, 400, 300)

        layout = QVBoxLayout()

        # File Type Selection
        self.file_type_label = QLabel("Select File Type:")
        self.file_type_dropdown = QComboBox()
        self.file_type_dropdown.addItems(["exe", "pdf", "script", "office"])
        self.file_type_dropdown.currentTextChanged.connect(self.update_model_dropdown)
        layout.addWidget(self.file_type_label)
        layout.addWidget(self.file_type_dropdown)

        # File Upload Button
        self.upload_button = QPushButton("Upload File")
        self.upload_button.clicked.connect(self.upload_file)
        layout.addWidget(self.upload_button)

        # Model Selection
        self.model_label = QLabel("Select Model:")
        self.model_dropdown = QComboBox()
        self.model_dropdown.addItems(["Random Forest (RF)", "Support Vector Machine (SVM)", "Convolutional Neural Network (CNN)"])
        layout.addWidget(self.model_label)
        layout.addWidget(self.model_dropdown)

        # Analyze Button
        self.analyze_button = QPushButton("Analyze File")
        self.analyze_button.clicked.connect(self.analyze_file)
        self.analyze_button.setEnabled(False)  # Disable until file is uploaded
        layout.addWidget(self.analyze_button)

        self.setLayout(layout)
        self.file_path = None  # Store uploaded file path

    def upload_file(self):
        file_type = self.file_type_dropdown.currentText()
        file_filter = {
            "exe": "Executable Files (*.exe *.dll *.sys)",
            "pdf": "PDF Files (*.pdf)",
            "script": "Script Files (*.py *.js *.vbs)",
            "office": "Office Files (*.docx *.xlsx *.pptx)"
        }

        file_name, _ = QFileDialog.getOpenFileName(self, "Upload File", "", file_filter[file_type])
        if file_name:
            self.file_path = file_name
            self.upload_button.setText(f"File: {os.path.basename(file_name)}")
            self.analyze_button.setEnabled(True)  # Enable analyze button

    def update_model_dropdown(self):
        file_type = self.file_type_dropdown.currentText()
        if file_type == "pdf":
            self.model_dropdown.setItemText(2, "Convolutional Neural Network (CNN) [Disabled]")
            self.model_dropdown.setEnabled(False)
            if self.model_dropdown.currentIndex() == 2:
                self.model_dropdown.setCurrentIndex(0)  # Switch to RF if CNN was selected
        else:
            self.model_dropdown.setItemText(2, "Convolutional Neural Network (CNN)")
            self.model_dropdown.setEnabled(True)

    def extract_features(self, file_path, file_type, model_choice):
        feature_extractors = {
            "exe": extract_pe_features,
            "pdf": parse_pdfid_output,
            "script": extract_script_features,
            "office": extract_office_features
        }
        
        extracted_features = feature_extractors.get(file_type, lambda x: {})(file_path)
        
        if not isinstance(extracted_features, dict):
            QMessageBox.warning(self, "Error", f"Feature extraction failed for {file_type}!")
            return None

        if model_choice == "Convolutional Neural Network (CNN)":
            image_tensor = generate_image_from_features(extracted_features)
            return image_tensor
        
        expected_features = RF_MODEL.feature_names_in_
        feature_vector = pd.DataFrame([extracted_features], columns=expected_features)
        feature_vector = feature_vector.fillna(0)

        return feature_vector

    def analyze_file(self):
        if not self.file_path:
            QMessageBox.warning(self, "Error", "Please upload a file first!")
            return

        file_type = self.file_type_dropdown.currentText()
        model_choice = self.model_dropdown.currentText()
        features = self.extract_features(self.file_path, file_type, model_choice)

        if features is None:
            QMessageBox.warning(self, "Error", "Could not extract features from the file!")
            return

        if model_choice == "Random Forest (RF)":
            model = RF_MODEL
            prediction = model.predict(features)
            probabilities = model.predict_proba(features)[0] if hasattr(model, "predict_proba") else None
            malware_type = MALWARE_TYPES[np.argmax(probabilities)] if probabilities is not None else "Unknown Malware"

        elif model_choice == "Support Vector Machine (SVM)":
            model = SVM_MODEL
            prediction = model.predict(features)
            malware_type = "Unknown Malware"  # SVM doesnâ€™t support probability

        else:  # CNN Model
            image_tensor = generate_image_from_features(features)
            prediction = CNN_MODEL(image_tensor.unsqueeze(0)).argmax().item()
            malware_type = "Malware" if prediction == 1 else "Safe"

        result_text = f"Malware Detected!\nType: {malware_type}" if prediction == 1 else "File is Safe"
        QMessageBox.information(self, "Analysis Result", result_text)

# Run GUI
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MalwareDetectorGUI()
    window.show()
    sys.exit(app.exec())